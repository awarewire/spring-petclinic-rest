pipeline {
    agent none
    stages {       
        stage('Build') {
            agent {
                docker {
                    image 'maven:3.8.8-eclipse-temurin-17-alpine'
                }
            }
            steps {
                sh 'mvn clean package -DskipTests -B -ntp'
            }
        }
        stage("DockerHub"){
            agent any
            steps{
                script {

                    // Forma 1: Usando variable global docker

                    // def pom = readMavenPom file: 'pom.xml'
                    // def app = docker.build("danycenas/${pom.artifactId}:${pom.version}")

                    // docker.withRegistry('https://registry.hub.docker.com/', 'dockerhub-credentials') {
                    //     app.push()
                    //     app.push('latest')
                    // }

                    // Forma 2: Usando buildx

                    sh 'docker run --privileged --rm tonistiigi/binfmt --install all'
                    sh 'docker buildx create --use'
                    sh 'docker buildx inspect --bootstrap'

                    sh 'docker buildx version'

                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh """
                            docker buildx build \
                                -t danycenas/${pom.artifactId}:${pom.version} \
                                -t danycenas/${pom.artifactId}:latest \
                                --platform linux/amd64,linux/arm64 --push .
                        """
                    }
                }
            }
        }
    }
    // post { 
    //     always { 
    //         cleanWs()
    //     }
    // }    
}